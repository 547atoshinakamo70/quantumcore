version: '{build}'
image: Visual Studio 2022
test: off

branches:
  only:
    - main
    - release/*

skip_tags: true
clone_depth: 1
shallow_clone: true

cache:
  - web\node_modules -> web\package-lock.json
  - desktop\node_modules -> desktop\package-lock.json

environment:
  NODE_VERSION: 20
  CSC_IDENTITY_AUTO_DISCOVERY: false

init:
  - ps: |
      $ProgressPreference = 'SilentlyContinue'
      Write-Host "Repo root:" (Get-Location)

install:
  - ps: |
      # --- Node con tolerancia a stderr benigno ---
      $prev = $ErrorActionPreference; $ErrorActionPreference = 'Continue'
      try { Install-Product node $env:NODE_VERSION -ErrorAction SilentlyContinue } catch { Write-Host "[warn] Install-Product: $($_.Exception.Message)" }
      $ErrorActionPreference = $prev

      try { node -v; npm -v } catch {
        Write-Host "[warn] Node no disponible; instalando LTS con choco..."
        choco install -y nodejs-lts
        RefreshEnv
        node -v; npm -v
      }

      # --- WEB: prepara configs ESM/CJS y deps ---
      Push-Location web

      # 1) Si el proyecto es ESM ("type":"module"), renombra configs .js -> .cjs para evitar "module is not defined"
      $pkgJson = Get-Content package.json -Raw | ConvertFrom-Json
      $isEsm = $pkgJson.PSObject.Properties.Name -contains "type" -and $pkgJson.type -eq "module"

      if ($isEsm) {
        if (Test-Path "postcss.config.js") { Rename-Item -Force "postcss.config.js" "postcss.config.cjs" }
        if (Test-Path "tailwind.config.js") { Rename-Item -Force "tailwind.config.js" "tailwind.config.cjs" }
      }

      # 2) Asegura postcss/tailwind configs (CJS)
      if (!(Test-Path "postcss.config.cjs")) {
        Set-Content -Encoding ASCII "postcss.config.cjs" (@"
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
"@)
      }
      if (!(Test-Path "tailwind.config.cjs")) {
        Set-Content -Encoding ASCII "tailwind.config.cjs" (@"
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./index.html','./src/**/*.{ts,tsx}'],
  theme: { extend: {} },
  plugins: [],
};
"@)
      }

      # 3) Dependencias
      if (Test-Path "package-lock.json") {
        cmd /c "npm ci --no-fund --no-audit"
      } else {
        cmd /c "npm install --no-fund --no-audit"
      }
      if (-not (Test-Path "node_modules\\@vitejs\\plugin-react")) {
        cmd /c "npm i -D @vitejs/plugin-react --no-fund --no-audit"
      }

      # 4) Build
      cmd /c "npm run build"
      if (-not (Test-Path "dist")) { throw "No se generó web/dist; revisa Vite" }
      Pop-Location

      # --- DESKTOP: deps ---
      Push-Location desktop
      if (Test-Path "package-lock.json") { cmd /c "npm ci --no-fund --no-audit" } else { cmd /c "npm install --no-fund --no-audit" }
      Pop-Location

build_script:
  - ps: |
      Set-StrictMode -Version Latest
      $ErrorActionPreference = 'Stop'

      # Copiar web → Electron
      if (Test-Path 'desktop\\app') { Remove-Item -Recurse -Force 'desktop\\app' }
      New-Item -ItemType Directory -Force -Path 'desktop\\app' | Out-Null
      robocopy web\\dist desktop\\app /E | Out-Host

      # Empaquetar (Windows)
      Push-Location desktop
      cmd /c "npm run pack:win"
      if ($LASTEXITCODE -ne 0) { Pop-Location; throw "electron-builder failed ($LASTEXITCODE)" }

      # Buscar .exe en release o dist
      $artifact = Get-ChildItem -Path ".\\release",".\\dist" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                  Sort-Object LastWriteTime -Descending | Select-Object -First 1
      Pop-Location

      if (-not $artifact) { throw "No se encontró ningún .exe en desktop\\release ni en desktop\\dist" }

      Copy-Item $artifact.FullName "QuantumCore-Setup-latest.exe" -Force
      Write-Host "Artefacto listo: QuantumCore-Setup-latest.exe"

artifacts:
  - path: QuantumCore-Setup-latest.exe
    name: QuantumCore-Setup
